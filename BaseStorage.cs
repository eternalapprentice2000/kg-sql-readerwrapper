using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System;
using System.Data;

namespace KG.System.Data.SqlClient.Extensions.ReaderWrapper
{
    public abstract class BaseStorage
    {
        protected static Dictionary<string, SqlConnection> _connections;
        protected SqlConnection _instanceConnection;

        public BaseStorage(string connectionString)
        {
            if (_connections == null)
            {
                _connections = new Dictionary<string, SqlConnection>(StringComparer.InvariantCultureIgnoreCase);
            }

            if (_connections.ContainsKey(connectionString))
            {
                _instanceConnection = _connections[connectionString];
            } else
            {
                _instanceConnection = new SqlConnection(connectionString);
                _instanceConnection.Open();

                _connections.Add(connectionString, _instanceConnection);
            }
        }


        /// <summary>
        /// Common code for executing the standard upsert
        /// </summary>
        /// <param name="procedureName">the name of the stored procedure</param>
        /// <param name="sqlParameters">an array of sql parameters</param>
        /// <returns>async task containing the number of records modified</returns>
        public async Task<int> ExecuteSpNonQueryAsync(string procedureName, SqlParameter[] sqlParameters)
        {
            using (var cmd = new SqlCommand(procedureName, _instanceConnection))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddRange(sqlParameters);

                return await cmd.ExecuteNonQueryAsync();
            }
        }

        /// <summary>
        /// Executes the stored procedure
        /// </summary>
        /// <param name="procedureName">the name of the stored procedure</param>
        /// <param name="sqlParameters">the list of sql params</param>
        /// <param name="function">function that handles how the reader is read into a T object</param>
        /// <returns>the actual taf object generated by the function code</returns>
        protected internal async Task<T> ExecuteSpReaderAsync<T>(
            string procedureName, SqlParameter[] sqlParameters, Func<DataReaderWrapper, T> function)
        {
            using (var cmd = new SqlCommand(procedureName, _instanceConnection))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddRange(sqlParameters);

                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    return function(new DataReaderWrapper(reader, procedureName));
                }
            }
        }
    }
}
